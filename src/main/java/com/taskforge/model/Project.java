package com.taskforge.model;

import java.util.Objects;

/**
 * Represents a project within the TaskForge task management system.
 * A project can be associated with a team and contains a collection of tasks.
 * This class encapsulates project properties such as ID, name, and the associated team.
 * It follows standard Java bean conventions for properties and includes
 * methods for equality, hashing, and string representation.
 */
public class Project {

    /** The unique identifier for the project. This is typically auto-generated by the database. */
    private int id;
    /** The name of the project. */
    private String name;
    /** The team this project is assigned to (can be null if not associated with any team). */
    private Team team; // The team this project is assigned to (can be null)

    /**
     * Default constructor for Project.
     * Useful for frameworks that require a no-argument constructor.
     */
    public Project() {
        // Default constructor
    }

    /**
     * Constructs a new Project with a specified name.
     * The ID is typically generated by the database.
     *
     * @param name The name of the project.
     */
    public Project(String name) {
        this.name = name;
    }

    /**
     * Constructs a new Project with a specified name and an associated team.
     * The ID is typically generated by the database.
     *
     * @param name The name of the project.
     * @param team The Team object this project belongs to (can be null).
     */
    public Project(String name, Team team) {
        this.name = name;
        this.team = team;
    }

    /**
     * Constructs a new Project with an ID, name, and an associated team.
     * This constructor is typically used when retrieving project data from the database.
     *
     * @param id The unique identifier for the project.
     * @param name The name of the project.
     * @param team The Team object this project belongs to (can be null).
     */
    public Project(int id, String name, Team team) {
        this.id = id;
        this.name = name;
        this.team = team;
    }

    // --- Getters and Setters ---

    /**
     * Gets the unique identifier of the project.
     * @return The project's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the project.
     * This method is typically used by DAOs when persisting or retrieving data.
     * @param id The project's ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the name of the project.
     * @return The project's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the project.
     * @param name The new project name.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the team associated with this project.
     * @return The Team object, or null if no team is associated.
     */
    public Team getTeam() {
        return team;
    }

    /**
     * Sets the team associated with this project.
     * @param team The Team object to associate, or null to disassociate.
     */
    public void setTeam(Team team) {
        this.team = team;
    }

    // --- Object Overrides for Equality and Hashing ---

    /**
     * Indicates whether some other object is "equal to" this one.
     * Two Project objects are considered equal if their IDs are the same.
     *
     * @param o The reference object with which to compare.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Project project = (Project) o;
        return id == project.id; // Projects are equal if their IDs are the same
    }

    /**
     * Returns a hash code value for the object.
     * Consistent with the equals method, the hash code is based on the project's ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the Project object.
     * Useful for logging and debugging.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "Project{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", team=" + (team != null ? team.getName() : "None") +
                '}';
    }
}

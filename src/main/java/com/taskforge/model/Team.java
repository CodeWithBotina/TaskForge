package com.taskforge.model;

import java.util.Objects;

/**
 * Represents a team within the TaskForge task management system.
 * This class encapsulates team properties such as ID and name.
 * It follows standard Java bean conventions for properties and includes
 * methods for equality, hashing, and string representation.
 */
public class Team {

    /** The unique identifier for the team. This is typically auto-generated by the database. */
    private int id;
    /** The name of the team. This must be unique across all teams. */
    private String name;

    /**
     * Default constructor for Team.
     * Useful for frameworks that require a no-argument constructor.
     */
    public Team() {
        // Default constructor
    }

    /**
     * Constructs a new Team with a specified name.
     * The ID is typically generated by the database, so it's not included in this constructor
     * for new teams.
     *
     * @param name The name of the team. Must be unique.
     */
    public Team(String name) {
        this.name = name;
    }

    /**
     * Constructs a new Team with an ID and specified name.
     * This constructor is typically used when retrieving team data from the database.
     *
     * @param id The unique identifier for the team.
     * @param name The name of the team.
     */
    public Team(int id, String name) {
        this.id = id;
        this.name = name;
    }

    // --- Getters and Setters ---

    /**
     * Gets the unique identifier of the team.
     * @return The team's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the team.
     * This method is typically used by DAOs when persisting or retrieving data.
     * @param id The team's ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the name of the team.
     * @return The team's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the team.
     * @param name The new team name.
     */
    public void setName(String name) {
        this.name = name;
    }

    // --- Object Overrides for Equality and Hashing ---

    /**
     * Indicates whether some other object is "equal to" this one.
     * Two Team objects are considered equal if their IDs are the same.
     *
     * @param o The reference object with which to compare.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Team team = (Team) o;
        return id == team.id; // Teams are equal if their IDs are the same
    }

    /**
     * Returns a hash code value for the object.
     * Consistent with the equals method, the hash code is based on the team's ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the Team object.
     * Useful for logging and debugging.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "Team{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}

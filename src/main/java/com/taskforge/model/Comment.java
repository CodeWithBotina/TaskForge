package com.taskforge.model;

import java.time.LocalDateTime; // For handling date and time of comment creation
import java.util.Objects;

/**
 * Represents a comment associated with a task in the TaskForge system.
 * This class encapsulates comment properties such as ID, the task it belongs to,
 * the author, the comment text, and the creation timestamp.
 * It follows standard Java bean conventions for properties and includes
 * methods for equality, hashing, and string representation.
 */
public class Comment {

    private int id;
    private Task task; // The task this comment belongs to
    private User author; // The user who authored this comment
    private String commentText;
    private LocalDateTime createdAt; // Timestamp when the comment was created

    /**
     * Default constructor for Comment.
     * Useful for frameworks that require a no-argument constructor.
     */
    public Comment() {
        // Default constructor
    }

    /**
     * Constructs a new Comment with essential details.
     * The ID is typically generated by the database.
     *
     * @param task The Task object this comment is associated with.
     * @param author The User object who created this comment.
     * @param commentText The actual text content of the comment.
     * @param createdAt The date and time when the comment was created.
     */
    public Comment(Task task, User author, String commentText, LocalDateTime createdAt) {
        this.task = task;
        this.author = author;
        this.commentText = commentText;
        this.createdAt = createdAt;
    }

    /**
     * Constructs a new Comment with an ID and all specified details.
     * This constructor is typically used when retrieving comment data from the database.
     *
     * @param id The unique identifier for the comment.
     * @param task The Task object this comment is associated with.
     * @param author The User object who created this comment.
     * @param commentText The actual text content of the comment.
     * @param createdAt The date and time when the comment was created.
     */
    public Comment(int id, Task task, User author, String commentText, LocalDateTime createdAt) {
        this.id = id;
        this.task = task;
        this.author = author;
        this.commentText = commentText;
        this.createdAt = createdAt;
    }

    // --- Getters and Setters ---

    /**
     * Gets the unique identifier of the comment.
     * @return The comment's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the comment.
     * This method is typically used by DAOs when persisting or retrieving data.
     * @param id The comment's ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the task associated with this comment.
     * @return The Task object this comment belongs to.
     */
    public Task getTask() {
        return task;
    }

    /**
     * Sets the task associated with this comment.
     * @param task The Task object to associate.
     */
    public void setTask(Task task) {
        this.task = task;
    }

    /**
     * Gets the author of this comment.
     * @return The User object who authored the comment.
     */
    public User getAuthor() {
        return author;
    }

    /**
     * Sets the author of this comment.
     * @param author The User object to set as the author.
     */
    public void setAuthor(User author) {
        this.author = author;
    }

    /**
     * Gets the text content of the comment.
     * @return The comment text.
     */
    public String getCommentText() {
        return commentText;
    }

    /**
     * Sets the text content of the comment.
     * @param commentText The new comment text.
     */
    public void setCommentText(String commentText) {
        this.commentText = commentText;
    }

    /**
     * Gets the creation timestamp of the comment.
     * @return The LocalDateTime when the comment was created.
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the creation timestamp of the comment.
     * @param createdAt The new creation timestamp.
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    // --- Object Overrides for Equality and Hashing ---

    /**
     * Indicates whether some other object is "equal to" this one.
     * Two Comment objects are considered equal if their IDs are the same.
     *
     * @param o The reference object with which to compare.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Comment comment = (Comment) o;
        return id == comment.id; // Comments are equal if their IDs are the same
    }

    /**
     * Returns a hash code value for the object.
     * Consistent with the equals method, the hash code is based on the comment's ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the Comment object.
     * Useful for logging and debugging.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "Comment{" +
                "id=" + id +
                ", taskId=" + (task != null ? task.getId() : "null") +
                ", author=" + (author != null ? author.getUsername() : "null") +
                ", commentText='" + commentText + '\'' +
                ", createdAt=" + createdAt +
                '}';
    }
}

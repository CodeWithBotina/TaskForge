package com.taskforge.model;

import java.time.LocalDateTime; // For handling date and time of attachment upload
import java.util.Objects;

/**
 * Represents an attachment associated with a task in the TaskForge system.
 * This class encapsulates attachment properties such as ID, the task it belongs to,
 * the file name, its storage path, and the upload timestamp.
 * It follows standard Java bean conventions for properties and includes
 * methods for equality, hashing, and string representation.
 */
public class Attachment {

    private int id;
    private Task task; // The task this attachment belongs to
    private String fileName;
    private String filePath; // Path where the file is stored (e.g., relative path on disk)
    private LocalDateTime uploadedAt; // Timestamp when the attachment was uploaded

    /**
     * Default constructor for Attachment.
     * Useful for frameworks that require a no-argument constructor.
     */
    public Attachment() {
        // Default constructor
    }

    /**
     * Constructs a new Attachment with essential details.
     * The ID is typically generated by the database.
     *
     * @param task The Task object this attachment is associated with.
     * @param fileName The name of the attached file.
     * @param filePath The path where the file is stored.
     * @param uploadedAt The date and time when the attachment was uploaded.
     */
    public Attachment(Task task, String fileName, String filePath, LocalDateTime uploadedAt) {
        this.task = task;
        this.fileName = fileName;
        this.filePath = filePath;
        this.uploadedAt = uploadedAt;
    }

    /**
     * Constructs a new Attachment with an ID and all specified details.
     * This constructor is typically used when retrieving attachment data from the database.
     *
     * @param id The unique identifier for the attachment.
     * @param task The Task object this attachment is associated with.
     * @param fileName The name of the attached file.
     * @param filePath The path where the file is stored.
     * @param uploadedAt The date and time when the attachment was uploaded.
     */
    public Attachment(int id, Task task, String fileName, String filePath, LocalDateTime uploadedAt) {
        this.id = id;
        this.task = task;
        this.fileName = fileName;
        this.filePath = filePath;
        this.uploadedAt = uploadedAt;
    }

    // --- Getters and Setters ---

    /**
     * Gets the unique identifier of the attachment.
     * @return The attachment's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the attachment.
     * This method is typically used by DAOs when persisting or retrieving data.
     * @param id The attachment's ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the task associated with this attachment.
     * @return The Task object this attachment belongs to.
     */
    public Task getTask() {
        return task;
    }

    /**
     * Sets the task associated with this attachment.
     * @param task The Task object to associate.
     */
    public void setTask(Task task) {
        this.task = task;
    }

    /**
     * Gets the name of the attached file.
     * @return The file name.
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * Sets the name of the attached file.
     * @param fileName The new file name.
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Gets the path where the file is stored.
     * @return The file path.
     */
    public String getFilePath() {
        return filePath;
    }

    /**
     * Sets the path where the file is stored.
     * @param filePath The new file path.
     */
    public void setFilePath(String filePath) {
        this.filePath = filePath;
    }

    /**
     * Gets the upload timestamp of the attachment.
     * @return The LocalDateTime when the attachment was uploaded.
     */
    public LocalDateTime getUploadedAt() {
        return uploadedAt;
    }

    /**
     * Sets the upload timestamp of the attachment.
     * @param uploadedAt The new upload timestamp.
     */
    public void setUploadedAt(LocalDateTime uploadedAt) {
        this.uploadedAt = uploadedAt;
    }

    // --- Object Overrides for Equality and Hashing ---

    /**
     * Indicates whether some other object is "equal to" this one.
     * Two Attachment objects are considered equal if their IDs are the same.
     *
     * @param o The reference object with which to compare.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Attachment that = (Attachment) o;
        return id == that.id; // Attachments are equal if their IDs are the same
    }

    /**
     * Returns a hash code value for the object.
     * Consistent with the equals method, the hash code is based on the attachment's ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the Attachment object.
     * Useful for logging and debugging.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "Attachment{" +
                "id=" + id +
                ", taskId=" + (task != null ? task.getId() : "null") +
                ", fileName='" + fileName + '\'' +
                ", filePath='" + filePath + '\'' +
                ", uploadedAt=" + uploadedAt +
                '}';
    }
}

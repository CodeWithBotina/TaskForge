package com.taskforge.model;

import java.util.Objects;

/**
 * Represents a user within the TaskForge task management system.
 * This class encapsulates user properties such as ID, username, email, and password hash.
 * It follows standard Java bean conventions for properties and includes
 * methods for equality, hashing, and string representation.
 */
public class User {

    /** The unique identifier for the user. This is typically auto-generated by the database. */
    private int id;
    /** The user's chosen username. This must be unique across all users. */
    private String username;
    /** The user's email address. This must be unique across all users. */
    private String email;
    /** The securely hashed password of the user. This is stored instead of the plain-text password. */
    private String passwordHash; // Stores the hashed password for security

    /**
     * Default constructor for User.
     * Useful for frameworks that require a no-argument constructor (e.g., ORMs or when deserializing).
     */
    public User() {
        // Default constructor
    }

    /**
     * Constructs a new User with specified details, typically for creating a new user record.
     * The ID is not included as it is usually generated by the database upon persistence.
     *
     * @param username The user's chosen username. Must be unique.
     * @param email The user's email address. Must be unique.
     * @param passwordHash The securely hashed password of the user.
     */
    public User(String username, String email, String passwordHash) {
        this.username = username;
        this.email = email;
        this.passwordHash = passwordHash;
    }

    /**
     * Constructs a new User with an ID and specified details.
     * This constructor is typically used when retrieving existing user data from the database.
     *
     * @param id The unique identifier for the user.
     * @param username The user's chosen username.
     * @param email The user's email address.
     * @param passwordHash The securely hashed password of the user.
     */
    public User(int id, String username, String email, String passwordHash) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.passwordHash = passwordHash;
    }

    // --- Getters and Setters ---

    /**
     * Gets the unique identifier of the user.
     * @return The user's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the user.
     * This method is typically used by Data Access Objects (DAOs) when persisting or retrieving data,
     * allowing the database-generated ID to be set back into the object.
     * @param id The user's ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the username of the user.
     * @return The username.
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the username of the user.
     * @param username The new username.
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Gets the email address of the user.
     * @return The email address.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email address of the user.
     * @param email The new email address.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the hashed password of the user.
     * This should only be used for password verification, not for display.
     * @return The password hash.
     */
    public String getPasswordHash() {
        return passwordHash;
    }

    /**
     * Sets the hashed password of the user.
     * This method should be used carefully, typically only when a new hash is generated
     * (e.g., during registration or password reset).
     * @param passwordHash The new password hash.
     */
    public void setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash;
    }

    // --- Object Overrides for Equality and Hashing ---

    /**
     * Indicates whether some other object is "equal to" this one.
     * Two User objects are considered equal if their IDs are the same.
     * This ensures that each user object uniquely represents a database record.
     *
     * @param o The reference object with which to compare.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return id == user.id; // Users are equal if their IDs are the same
    }

    /**
     * Returns a hash code value for the object.
     * Consistent with the equals method, the hash code is based solely on the user's ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the User object.
     * Useful for logging and debugging. Note that the password hash is intentionally
     * excluded from this representation for security reasons.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", email='" + email + '\'' +
                // Do NOT include passwordHash in toString for security reasons
                '}';
    }
}

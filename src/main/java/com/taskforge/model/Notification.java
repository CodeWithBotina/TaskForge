package com.taskforge.model;

import java.time.LocalDateTime; // For handling date and time of notification
import java.util.Objects;

/**
 * Represents a notification in the TaskForge system.
 * This class encapsulates notification properties such as ID, the user it's sent to,
 * the message content, the sent timestamp, whether it has been read,
 * and new fields for context: related entity ID and notification type.
 * It follows standard Java bean conventions for properties and includes
 * methods for equality, hashing, and string representation.
 */
public class Notification {

    private int id;
    private User recipient; // The user who receives this notification
    private String message;
    private LocalDateTime sentAt; // Timestamp when the notification was sent
    private boolean isRead; // Indicates if the notification has been read by the recipient
    private int relatedEntityId; // ID of the entity related to the notification (e.g., Team ID for an invitation)
    private NotificationType notificationType; // Type of notification (e.g., TEAM_INVITATION, TASK_REMINDER)

    /**
     * Enum for the type of notification.
     */
    public enum NotificationType {
        GENERAL,          // General informational message
        TEAM_INVITATION,  // Invitation to join a team
        TASK_REMINDER,    // Reminder for an upcoming task
        TASK_ASSIGNMENT;  // Notification about a task assignment
        // Add more types as needed
    }

    /**
     * Default constructor for Notification.
     * Useful for frameworks that require a no-argument constructor.
     */
    public Notification() {
        // Default constructor
    }

    /**
     * Constructs a new Notification with essential details.
     * The ID is typically generated by the database.
     * The 'isRead' status defaults to false (unread).
     * The 'notificationType' defaults to GENERAL.
     * The 'relatedEntityId' defaults to 0 (no specific entity).
     *
     * @param recipient The User object who is the recipient of this notification.
     * @param message The content of the notification message.
     * @param sentAt The date and time when the notification was sent.
     */
    public Notification(User recipient, String message, LocalDateTime sentAt) {
        this(recipient, message, sentAt, false, 0, NotificationType.GENERAL);
    }

    /**
     * Constructs a new Notification with essential details, including type and related entity.
     * The ID is typically generated by the database.
     * The 'isRead' status defaults to false (unread).
     *
     * @param recipient The User object who is the recipient of this notification.
     * @param message The content of the notification message.
     * @param sentAt The date and time when the notification was sent.
     * @param relatedEntityId The ID of the entity related to this notification (e.g., Team ID).
     * @param notificationType The type of this notification.
     */
    public Notification(User recipient, String message, LocalDateTime sentAt, int relatedEntityId, NotificationType notificationType) {
        this(recipient, message, sentAt, false, relatedEntityId, notificationType);
    }

    /**
     * Constructs a new Notification with all specified details, excluding the ID.
     * This constructor is used when creating a new notification before it's persisted to the database.
     *
     * @param recipient The User object who is the recipient of this notification.
     * @param message The content of the notification message.
     * @param sentAt The date and time when the notification was sent.
     * @param isRead True if the notification has been read, false otherwise.
     * @param relatedEntityId The ID of the entity related to this notification.
     * @param notificationType The type of this notification.
     */
    public Notification(User recipient, String message, LocalDateTime sentAt, boolean isRead, int relatedEntityId, NotificationType notificationType) {
        this.recipient = recipient;
        this.message = message;
        this.sentAt = sentAt;
        this.isRead = isRead;
        this.relatedEntityId = relatedEntityId;
        this.notificationType = notificationType;
    }

    /**
     * Constructs a new Notification with an ID and all specified details.
     * This constructor is typically used when retrieving notification data from the database.
     *
     * @param id The unique identifier for the notification.
     * @param recipient The User object who is the recipient of this notification.
     * @param message The content of the notification message.
     * @param sentAt The date and time when the notification was sent.
     * @param isRead True if the notification has been read, false otherwise.
     * @param relatedEntityId The ID of the entity related to this notification.
     * @param notificationType The type of this notification.
     */
    public Notification(int id, User recipient, String message, LocalDateTime sentAt, boolean isRead, int relatedEntityId, NotificationType notificationType) {
        this.id = id;
        this.recipient = recipient;
        this.message = message;
        this.sentAt = sentAt;
        this.isRead = isRead;
        this.relatedEntityId = relatedEntityId;
        this.notificationType = notificationType;
    }

    // --- Getters and Setters ---

    /**
     * Gets the unique identifier of the notification.
     * @return The notification's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the notification.
     * This method is typically used by DAOs when persisting or retrieving data.
     * @param id The notification's ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the recipient user of this notification.
     * @return The User object who is the recipient.
     */
    public User getRecipient() {
        return recipient;
    }

    /**
     * Sets the recipient user of this notification.
     * @param recipient The User object to set as the recipient.
     */
    public void setRecipient(User recipient) {
        this.recipient = recipient;
    }

    /**
     * Gets the message content of the notification.
     * @return The notification message.
     */
    public String getMessage() {
        return message;
    }

    /**
     * Sets the message content of the notification.
     * @param message The new notification message.
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Gets the timestamp when the notification was sent.
     * @return The LocalDateTime when the notification was sent.
     */
    public LocalDateTime getSentAt() {
        return sentAt;
    }

    /**
     * Sets the timestamp when the notification was sent.
     * @param sentAt The new sent timestamp.
     */
    public void setSentAt(LocalDateTime sentAt) {
        this.sentAt = sentAt;
    }

    /**
     * Checks if the notification has been read.
     * @return True if the notification is read, false otherwise.
     */
    public boolean isRead() {
        return isRead;
    }

    /**
     * Sets the read status of the notification.
     * @param read True to mark as read, false to mark as unread.
     */
    public void setRead(boolean read) {
        isRead = read;
    }

    /**
     * Gets the ID of the entity related to this notification.
     * @return The related entity ID.
     */
    public int getRelatedEntityId() {
        return relatedEntityId;
    }

    /**
     * Sets the ID of the entity related to this notification.
     * @param relatedEntityId The new related entity ID.
     */
    public void setRelatedEntityId(int relatedEntityId) {
        this.relatedEntityId = relatedEntityId;
    }

    /**
     * Gets the type of this notification.
     * @return The NotificationType enum.
     */
    public NotificationType getNotificationType() {
        return notificationType;
    }

    /**
     * Sets the type of this notification.
     * @param notificationType The new NotificationType enum.
     */
    public void setNotificationType(NotificationType notificationType) {
        this.notificationType = notificationType;
    }

    // --- Object Overrides for Equality and Hashing ---

    /**
     * Indicates whether some other object is "equal to" this one.
     * Two Notification objects are considered equal if their IDs are the same.
     *
     * @param o The reference object with which to compare.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Notification that = (Notification) o;
        return id == that.id; // Notifications are equal if their IDs are the same
    }

    /**
     * Returns a hash code value for the object.
     * Consistent with the equals method, the hash code is based on the notification's ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the Notification object.
     * Useful for logging and debugging.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "Notification{" +
                "id=" + id +
                ", recipient=" + (recipient != null ? recipient.getUsername() : "null") +
                ", message='" + message + '\'' +
                ", sentAt=" + sentAt +
                ", isRead=" + isRead +
                ", relatedEntityId=" + relatedEntityId +
                ", notificationType=" + notificationType +
                '}';
    }
}

package com.taskforge.dao;

import com.taskforge.model.Attachment;
import com.taskforge.model.Task;
import com.taskforge.util.DatabaseManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Data Access Object (DAO) for the Attachment entity.
 * This class provides methods to perform CRUD (Create, Read, Update, Delete)
 * operations on the 'Attachments' table in the database.
 * It handles associations with the Task entity and conversions for LocalDateTime.
 */
public class AttachmentDAO {

    private final TaskDAO taskDAO;    // Dependency for fetching Task objects

    // DateTimeFormatter for converting LocalDateTime to and from String for SQLite TEXT storage
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

    /**
     * Constructs an AttachmentDAO with a TaskDAO dependency.
     *
     * @param taskDAO The Data Access Object for Task entities.
     */
    public AttachmentDAO(TaskDAO taskDAO) {
        this.taskDAO = taskDAO;
    }

    /**
     * Inserts a new attachment into the database.
     * The attachment's ID will be auto-generated by the database and set back into the Attachment object.
     *
     * @param attachment The Attachment object to be saved.
     * @return The Attachment object with its database-generated ID, or null if the insertion failed.
     */
    public Attachment createAttachment(Attachment attachment) {
        String sql = "INSERT INTO Attachments(task_id, file_name, file_path, uploaded_at) VALUES(?, ?, ?, ?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setInt(1, attachment.getTask().getId());
            pstmt.setString(2, attachment.getFileName());
            pstmt.setString(3, attachment.getFilePath());
            pstmt.setString(4, attachment.getUploadedAt().format(FORMATTER)); // Convert LocalDateTime to String

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        attachment.setId(generatedKeys.getInt(1)); // Set the generated ID back to the attachment object
                        System.out.println("Attachment created successfully with ID: " + attachment.getId());
                        return attachment;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error creating attachment: " + e.getMessage());
            // Log the exception for debugging
        }
        return null;
    }

    /**
     * Retrieves an attachment from the database by its ID.
     *
     * @param id The ID of the attachment to retrieve.
     * @return An Optional containing the Attachment object if found, or an empty Optional if not found.
     */
    public Optional<Attachment> getAttachmentById(int id) {
        String sql = "SELECT id, task_id, file_name, file_path, uploaded_at FROM Attachments WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(extractAttachmentFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving attachment by ID: " + e.getMessage());
        }
        return Optional.empty();
    }

    /**
     * Retrieves all attachments associated with a specific task.
     *
     * @param taskId The ID of the task.
     * @return A list of Attachment objects associated with the given task.
     */
    public List<Attachment> getAttachmentsByTaskId(int taskId) {
        List<Attachment> attachments = new ArrayList<>();
        String sql = "SELECT id, task_id, file_name, file_path, uploaded_at FROM Attachments WHERE task_id = ? ORDER BY uploaded_at ASC";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, taskId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    attachments.add(extractAttachmentFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving attachments by task ID: " + e.getMessage());
        }
        return attachments;
    }

    /**
     * Retrieves all attachments from the database.
     *
     * @return A list of all Attachment objects found in the database.
     */
    public List<Attachment> getAllAttachments() {
        List<Attachment> attachments = new ArrayList<>();
        String sql = "SELECT id, task_id, file_name, file_path, uploaded_at FROM Attachments";
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                attachments.add(extractAttachmentFromResultSet(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all attachments: " + e.getMessage());
        }
        return attachments;
    }

    /**
     * Updates an existing attachment's information in the database.
     * The attachment's ID must be set for the update to occur.
     *
     * @param attachment The Attachment object containing the updated information.
     * @return true if the attachment was updated successfully, false otherwise.
     */
    public boolean updateAttachment(Attachment attachment) {
        String sql = "UPDATE Attachments SET task_id = ?, file_name = ?, file_path = ?, uploaded_at = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, attachment.getTask().getId());
            pstmt.setString(2, attachment.getFileName());
            pstmt.setString(3, attachment.getFilePath());
            pstmt.setString(4, attachment.getUploadedAt().format(FORMATTER));
            pstmt.setInt(5, attachment.getId());

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error updating attachment: " + e.getMessage());
        }
        return false;
    }

    /**
     * Deletes an attachment from the database by its ID.
     *
     * @param id The ID of the attachment to delete.
     * @return true if the attachment was deleted successfully, false otherwise.
     */
    public boolean deleteAttachment(int id) {
        String sql = "DELETE FROM Attachments WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting attachment: " + e.getMessage());
        }
        return false;
    }

    /**
     * Helper method to extract an Attachment object from a ResultSet.
     * This centralizes the logic for mapping database rows to Attachment objects.
     *
     * @param rs The ResultSet containing the attachment data.
     * @return An Attachment object populated with data from the ResultSet.
     * @throws SQLException If a database access error occurs or this method is called on a closed result set.
     */
    private Attachment extractAttachmentFromResultSet(ResultSet rs) throws SQLException {
        int attachmentId = rs.getInt("id");
        int taskId = rs.getInt("task_id");
        String fileName = rs.getString("file_name");
        String filePath = rs.getString("file_path");
        String uploadedAtStr = rs.getString("uploaded_at");
        LocalDateTime uploadedAt = LocalDateTime.parse(uploadedAtStr, FORMATTER);

        // Fetch associated Task object using its DAO
        Task task = taskDAO.getTaskById(taskId)
                .orElseThrow(() -> new SQLException("Associated Task not found for attachment ID: " + attachmentId));

        return new Attachment(attachmentId, task, fileName, filePath, uploadedAt);
    }
}

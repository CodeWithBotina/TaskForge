package com.taskforge.dao;

import com.taskforge.model.Notification;
import com.taskforge.model.User;
import com.taskforge.util.DatabaseManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Data Access Object (DAO) for the Notification entity.
 * This class provides methods to perform CRUD (Create, Read, Update, Delete)
 * operations on the 'Notifications' table in the database.
 * It handles associations with the User entity and conversions for LocalDateTime.
 */
public class NotificationDAO {

    private final UserDAO userDAO;    // Dependency for fetching User objects

    // DateTimeFormatter for converting LocalDateTime to and from String for SQLite TEXT storage
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

    /**
     * Constructs a NotificationDAO with a UserDAO dependency.
     *
     * @param userDAO The Data Access Object for User entities.
     */
    public NotificationDAO(UserDAO userDAO) {
        this.userDAO = userDAO;
    }

    /**
     * Inserts a new notification into the database.
     * The notification's ID will be auto-generated by the database and set back into the Notification object.
     *
     * @param notification The Notification object to be saved.
     * @return The Notification object with its database-generated ID, or null if the insertion failed.
     */
    public Notification createNotification(Notification notification) {
        String sql = "INSERT INTO Notifications(user_id, message, sent_at, is_read, related_entity_id, notification_type) VALUES(?, ?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setInt(1, notification.getRecipient().getId());
            pstmt.setString(2, notification.getMessage());
            pstmt.setString(3, notification.getSentAt().format(FORMATTER)); // Convert LocalDateTime to String
            pstmt.setBoolean(4, notification.isRead()); // Store boolean as 0 or 1
            pstmt.setInt(5, notification.getRelatedEntityId()); // Add related_entity_id
            pstmt.setString(6, notification.getNotificationType().name()); // Add notification_type

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        notification.setId(generatedKeys.getInt(1)); // Set the generated ID back to the notification object
                        System.out.println("Notification created successfully with ID: " + notification.getId());
                        return notification;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error creating notification: " + e.getMessage());
            // Log the exception for debugging
        }
        return null;
    }

    /**
     * Retrieves a notification from the database by its ID.
     *
     * @param id The ID of the notification to retrieve.
     * @return An Optional containing the Notification object if found, or an empty Optional if not found.
     */
    public Optional<Notification> getNotificationById(int id) {
        String sql = "SELECT id, user_id, message, sent_at, is_read, related_entity_id, notification_type FROM Notifications WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(extractNotificationFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving notification by ID: " + e.getMessage());
        }
        return Optional.empty();
    }

    /**
     * Retrieves all notifications for a specific user.
     *
     * @param userId The ID of the recipient user.
     * @return A list of Notification objects for the given user, ordered by sent date.
     */
    public List<Notification> getNotificationsByUserId(int userId) {
        List<Notification> notifications = new ArrayList<>();
        String sql = "SELECT id, user_id, message, sent_at, is_read, related_entity_id, notification_type FROM Notifications WHERE user_id = ? ORDER BY sent_at DESC";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    notifications.add(extractNotificationFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving notifications by user ID: " + e.getMessage());
        }
        return notifications;
    }

    /**
     * Retrieves all unread notifications for a specific user.
     *
     * @param userId The ID of the recipient user.
     * @return A list of unread Notification objects for the given user, ordered by sent date.
     */
    public List<Notification> getUnreadNotificationsByUserId(int userId) {
        List<Notification> notifications = new ArrayList<>();
        String sql = "SELECT id, user_id, message, sent_at, is_read, related_entity_id, notification_type FROM Notifications WHERE user_id = ? AND is_read = 0 ORDER BY sent_at DESC";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    notifications.add(extractNotificationFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving unread notifications by user ID: " + e.getMessage());
        }
        return notifications;
    }

    /**
     * Retrieves all notifications from the database.
     *
     * @return A list of all Notification objects found in the database.
     */
    public List<Notification> getAllNotifications() {
        List<Notification> notifications = new ArrayList<>();
        String sql = "SELECT id, user_id, message, sent_at, is_read, related_entity_id, notification_type FROM Notifications ORDER BY sent_at DESC";
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                notifications.add(extractNotificationFromResultSet(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all notifications: " + e.getMessage());
        }
        return notifications;
    }

    /**
     * Updates an existing notification's information in the database.
     * The notification's ID must be set for the update to occur.
     *
     * @param notification The Notification object containing the updated information.
     * @return true if the notification was updated successfully, false otherwise.
     */
    public boolean updateNotification(Notification notification) {
        String sql = "UPDATE Notifications SET user_id = ?, message = ?, sent_at = ?, is_read = ?, related_entity_id = ?, notification_type = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, notification.getRecipient().getId());
            pstmt.setString(2, notification.getMessage());
            pstmt.setString(3, notification.getSentAt().format(FORMATTER));
            pstmt.setBoolean(4, notification.isRead());
            pstmt.setInt(5, notification.getRelatedEntityId());
            pstmt.setString(6, notification.getNotificationType().name());
            pstmt.setInt(7, notification.getId());

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error updating notification: " + e.getMessage());
        }
        return false;
    }

    /**
     * Marks a specific notification as read in the database.
     *
     * @param notificationId The ID of the notification to mark as read.
     * @return true if the notification was marked as read successfully, false otherwise.
     */
    public boolean markNotificationAsRead(int notificationId) {
        String sql = "UPDATE Notifications SET is_read = 1 WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, notificationId);
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error marking notification as read: " + e.getMessage());
        }
        return false;
    }

    /**
     * Deletes a notification from the database by its ID.
     *
     * @param id The ID of the notification to delete.
     * @return true if the notification was deleted successfully, false otherwise.
     */
    public boolean deleteNotification(int id) {
        String sql = "DELETE FROM Notifications WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting notification: " + e.getMessage());
        }
        return false;
    }

    /**
     * Helper method to extract a Notification object from a ResultSet.
     * This centralizes the logic for mapping database rows to Notification objects.
     *
     * @param rs The ResultSet containing the notification data.
     * @return A Notification object populated with data from the ResultSet.
     * @throws SQLException If a database access error occurs or this method is called on a closed result set.
     */
    private Notification extractNotificationFromResultSet(ResultSet rs) throws SQLException {
        int notificationId = rs.getInt("id");
        int userId = rs.getInt("user_id");
        String message = rs.getString("message");
        String sentAtStr = rs.getString("sent_at");
        LocalDateTime sentAt = LocalDateTime.parse(sentAtStr, FORMATTER);
        boolean isRead = rs.getBoolean("is_read");
        int relatedEntityId = rs.getInt("related_entity_id"); // Retrieve new field
        Notification.NotificationType notificationType = Notification.NotificationType.valueOf(rs.getString("notification_type")); // Retrieve new field

        // Fetch associated User object using its DAO
        User recipient = userDAO.getUserById(userId)
                .orElseThrow(() -> new SQLException("Associated User (recipient) not found for notification ID: " + notificationId));

        // Use the constructor that includes relatedEntityId and notificationType
        return new Notification(notificationId, recipient, message, sentAt, isRead, relatedEntityId, notificationType);
    }
}

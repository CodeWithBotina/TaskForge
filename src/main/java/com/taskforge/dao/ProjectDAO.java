package com.taskforge.dao;

import com.taskforge.model.Project;
import com.taskforge.model.Team;
import com.taskforge.util.DatabaseManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Data Access Object (DAO) for the Project entity.
 * This class provides methods to perform CRUD (Create, Read, Update, Delete)
 * operations on the 'Projects' table in the database.
 * It also handles the association with the Team entity.
 */
public class ProjectDAO {

    /** The Data Access Object for Team entities, used to fetch associated Team objects. */
    private final TeamDAO teamDAO;

    /**
     * Constructs a ProjectDAO with a TeamDAO dependency.
     *
     * @param teamDAO The Data Access Object for Team entities.
     */
    public ProjectDAO(TeamDAO teamDAO) {
        this.teamDAO = teamDAO;
    }

    /**
     * Inserts a new project into the database.
     * The project's ID will be auto-generated by the database and set back into the Project object.
     *
     * @param project The Project object to be saved.
     * @return The Project object with its database-generated ID, or null if the insertion failed.
     */
    public Project createProject(Project project) {
        String sql = "INSERT INTO Projects(name, team_id) VALUES(?, ?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, project.getName());
            if (project.getTeam() != null) {
                pstmt.setInt(2, project.getTeam().getId());
            } else {
                pstmt.setNull(2, java.sql.Types.INTEGER);
            }

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        project.setId(generatedKeys.getInt(1)); // Set the generated ID back to the project object
                        System.out.println("Project created successfully with ID: " + project.getId());
                        return project;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error creating project: " + e.getMessage());
            // Log the exception for debugging
        }
        return null;
    }

    /**
     * Retrieves a project from the database by its ID.
     *
     * @param id The ID of the project to retrieve.
     * @return An Optional containing the Project object if found, or an empty Optional if not found.
     */
    public Optional<Project> getProjectById(int id) {
        String sql = "SELECT id, name, team_id FROM Projects WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    int projectId = rs.getInt("id");
                    String projectName = rs.getString("name");
                    int teamId = rs.getInt("team_id");
                    Team team = null;
                    if (!rs.wasNull()) { // Check if team_id was actually null in DB
                        team = teamDAO.getTeamById(teamId).orElse(null);
                    }
                    return Optional.of(new Project(projectId, projectName, team));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving project by ID: " + e.getMessage());
        }
        return Optional.empty();
    }

    /**
     * Retrieves projects from the database by their name (case-insensitive search).
     *
     * @param name The name (or partial name) of the project to retrieve.
     * @return A list of Project objects found in the database.
     */
    public List<Project> getProjectsByName(String name) {
        List<Project> projects = new ArrayList<>();
        // Using LIKE for partial matching, and LOWER for case-insensitivity
        String sql = "SELECT id, name, team_id FROM Projects WHERE LOWER(name) LIKE LOWER(?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, "%" + name + "%"); // Wildcard for partial match
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    int projectId = rs.getInt("id");
                    String projectName = rs.getString("name");
                    int teamId = rs.getInt("team_id");
                    Team team = null;
                    if (!rs.wasNull()) {
                        team = teamDAO.getTeamById(teamId).orElse(null);
                    }
                    projects.add(new Project(projectId, projectName, team));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving projects by name: " + e.getMessage());
        }
        return projects;
    }

    /**
     * Retrieves all projects associated with a specific team.
     *
     * @param teamId The ID of the team.
     * @return A list of Project objects associated with the given team.
     */
    public List<Project> getProjectsByTeamId(int teamId) {
        List<Project> projects = new ArrayList<>();
        String sql = "SELECT id, name, team_id FROM Projects WHERE team_id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, teamId);
            try (ResultSet rs = pstmt.executeQuery()) {
                Team team = teamDAO.getTeamById(teamId).orElse(null); // Fetch team once if it exists
                while (rs.next()) {
                    int projectId = rs.getInt("id");
                    String projectName = rs.getString("name");
                    projects.add(new Project(projectId, projectName, team)); // Use the fetched team object
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving projects by team ID: " + e.getMessage());
        }
        return projects;
    }

    /**
     * Retrieves all projects from the database.
     *
     * @return A list of all Project objects found in the database.
     */
    public List<Project> getAllProjects() {
        List<Project> projects = new ArrayList<>();
        String sql = "SELECT id, name, team_id FROM Projects";
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                int projectId = rs.getInt("id");
                String projectName = rs.getString("name");
                int teamId = rs.getInt("team_id");
                Team team = null;
                if (!rs.wasNull()) {
                    team = teamDAO.getTeamById(teamId).orElse(null);
                }
                projects.add(new Project(projectId, projectName, team));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all projects: " + e.getMessage());
        }
        return projects;
    }

    /**
     * Updates an existing project's information in the database.
     * The project's ID must be set for the update to occur.
     *
     * @param project The Project object containing the updated information.
     * @return true if the project was updated successfully, false otherwise.
     */
    public boolean updateProject(Project project) {
        String sql = "UPDATE Projects SET name = ?, team_id = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, project.getName());
            if (project.getTeam() != null) {
                pstmt.setInt(2, project.getTeam().getId());
            } else {
                pstmt.setNull(2, java.sql.Types.INTEGER);
            }
            pstmt.setInt(3, project.getId());

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error updating project: " + e.getMessage());
        }
        return false;
    }

    /**
     * Deletes a project from the database by its ID.
     *
     * @param id The ID of the project to delete.
     * @return true if the project was deleted successfully, false otherwise.
     */
    public boolean deleteProject(int id) {
        String sql = "DELETE FROM Projects WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting project: " + e.getMessage());
        }
        return false;
    }
}

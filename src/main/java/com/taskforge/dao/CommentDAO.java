package com.taskforge.dao;

import com.taskforge.model.Comment;
import com.taskforge.model.Task;
import com.taskforge.model.User;
import com.taskforge.util.DatabaseManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Data Access Object (DAO) for the Comment entity.
 * This class provides methods to perform CRUD (Create, Read, Update, Delete)
 * operations on the 'Comments' table in the database.
 * It handles associations with Task and User entities, and conversions for LocalDateTime.
 */
public class CommentDAO {

    private final TaskDAO taskDAO;    // Dependency for fetching Task objects
    private final UserDAO userDAO;    // Dependency for fetching User objects

    // DateTimeFormatter for converting LocalDateTime to and from String for SQLite TEXT storage
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

    /**
     * Constructs a CommentDAO with TaskDAO and UserDAO dependencies.
     *
     * @param taskDAO The Data Access Object for Task entities.
     * @param userDAO The Data Access Object for User entities.
     */
    public CommentDAO(TaskDAO taskDAO, UserDAO userDAO) {
        this.taskDAO = taskDAO;
        this.userDAO = userDAO;
    }

    /**
     * Inserts a new comment into the database.
     * The comment's ID will be auto-generated by the database and set back into the Comment object.
     *
     * @param comment The Comment object to be saved.
     * @return The Comment object with its database-generated ID, or null if the insertion failed.
     */
    public Comment createComment(Comment comment) {
        String sql = "INSERT INTO Comments(task_id, author_id, comment_text, created_at) VALUES(?, ?, ?, ?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setInt(1, comment.getTask().getId());
            pstmt.setInt(2, comment.getAuthor().getId());
            pstmt.setString(3, comment.getCommentText());
            pstmt.setString(4, comment.getCreatedAt().format(FORMATTER)); // Convert LocalDateTime to String

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        comment.setId(generatedKeys.getInt(1)); // Set the generated ID back to the comment object
                        System.out.println("Comment created successfully with ID: " + comment.getId());
                        return comment;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error creating comment: " + e.getMessage());
            // Log the exception for debugging
        }
        return null;
    }

    /**
     * Retrieves a comment from the database by its ID.
     *
     * @param id The ID of the comment to retrieve.
     * @return An Optional containing the Comment object if found, or an empty Optional if not found.
     */
    public Optional<Comment> getCommentById(int id) {
        String sql = "SELECT id, task_id, author_id, comment_text, created_at FROM Comments WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(extractCommentFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving comment by ID: " + e.getMessage());
        }
        return Optional.empty();
    }

    /**
     * Retrieves all comments associated with a specific task.
     *
     * @param taskId The ID of the task.
     * @return A list of Comment objects associated with the given task.
     */
    public List<Comment> getCommentsByTaskId(int taskId) {
        List<Comment> comments = new ArrayList<>();
        String sql = "SELECT id, task_id, author_id, comment_text, created_at FROM Comments WHERE task_id = ? ORDER BY created_at ASC";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, taskId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    comments.add(extractCommentFromResultSet(rs));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving comments by task ID: " + e.getMessage());
        }
        return comments;
    }

    /**
     * Retrieves all comments from the database.
     *
     * @return A list of all Comment objects found in the database.
     */
    public List<Comment> getAllComments() {
        List<Comment> comments = new ArrayList<>();
        String sql = "SELECT id, task_id, author_id, comment_text, created_at FROM Comments";
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                comments.add(extractCommentFromResultSet(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all comments: " + e.getMessage());
        }
        return comments;
    }

    /**
     * Updates an existing comment's information in the database.
     * The comment's ID must be set for the update to occur.
     *
     * @param comment The Comment object containing the updated information.
     * @return true if the comment was updated successfully, false otherwise.
     */
    public boolean updateComment(Comment comment) {
        String sql = "UPDATE Comments SET task_id = ?, author_id = ?, comment_text = ?, created_at = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, comment.getTask().getId());
            pstmt.setInt(2, comment.getAuthor().getId());
            pstmt.setString(3, comment.getCommentText());
            pstmt.setString(4, comment.getCreatedAt().format(FORMATTER));
            pstmt.setInt(5, comment.getId());

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error updating comment: " + e.getMessage());
        }
        return false;
    }

    /**
     * Deletes a comment from the database by its ID.
     *
     * @param id The ID of the comment to delete.
     * @return true if the comment was deleted successfully, false otherwise.
     */
    public boolean deleteComment(int id) {
        String sql = "DELETE FROM Comments WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting comment: " + e.getMessage());
        }
        return false;
    }

    /**
     * Helper method to extract a Comment object from a ResultSet.
     * This centralizes the logic for mapping database rows to Comment objects.
     *
     * @param rs The ResultSet containing the comment data.
     * @return A Comment object populated with data from the ResultSet.
     * @throws SQLException If a database access error occurs or this method is called on a closed result set.
     */
    private Comment extractCommentFromResultSet(ResultSet rs) throws SQLException {
        int commentId = rs.getInt("id");
        int taskId = rs.getInt("task_id");
        int authorId = rs.getInt("author_id");
        String commentText = rs.getString("comment_text");
        String createdAtStr = rs.getString("created_at");
        LocalDateTime createdAt = LocalDateTime.parse(createdAtStr, FORMATTER);

        // Fetch associated Task and User objects using their DAOs
        Task task = taskDAO.getTaskById(taskId)
                .orElseThrow(() -> new SQLException("Associated Task not found for comment ID: " + commentId));
        User author = userDAO.getUserById(authorId)
                .orElseThrow(() -> new SQLException("Associated User (author) not found for comment ID: " + commentId));

        return new Comment(commentId, task, author, commentText, createdAt);
    }
}

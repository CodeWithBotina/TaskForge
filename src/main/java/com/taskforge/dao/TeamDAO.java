package com.taskforge.dao;

import com.taskforge.model.Team;
import com.taskforge.util.DatabaseManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Data Access Object (DAO) for the Team entity.
 * This class provides methods to perform CRUD (Create, Read, Update, Delete)
 * operations on the 'Teams' table in the database.
 * It abstracts the underlying database interactions, allowing the rest of the application
 * to work with Team objects without knowing the specifics of SQL.
 */
public class TeamDAO {

    /**
     * Inserts a new team into the database.
     * The team's ID will be auto-generated by the database and set back into the Team object.
     *
     * @param team The Team object to be saved.
     * @return The Team object with its database-generated ID, or null if the insertion failed.
     */
    public Team createTeam(Team team) {
        String sql = "INSERT INTO Teams(name) VALUES(?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, team.getName());

            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        team.setId(generatedKeys.getInt(1)); // Set the generated ID back to the team object
                        System.out.println("Team created successfully with ID: " + team.getId());
                        return team;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error creating team: " + e.getMessage());
            // Log the exception for debugging
        }
        return null;
    }

    /**
     * Retrieves a team from the database by its ID.
     *
     * @param id The ID of the team to retrieve.
     * @return An Optional containing the Team object if found, or an empty Optional if not found.
     */
    public Optional<Team> getTeamById(int id) {
        String sql = "SELECT id, name FROM Teams WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(new Team(
                            rs.getInt("id"),
                            rs.getString("name")
                    ));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving team by ID: " + e.getMessage());
        }
        return Optional.empty();
    }

    /**
     * Retrieves a team from the database by its name.
     *
     * @param name The name of the team to retrieve.
     * @return An Optional containing the Team object if found, or an empty Optional if not found.
     */
    public Optional<Team> getTeamByName(String name) {
        String sql = "SELECT id, name FROM Teams WHERE name = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, name);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(new Team(
                            rs.getInt("id"),
                            rs.getString("name")
                    ));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving team by name: " + e.getMessage());
        }
        return Optional.empty();
    }

    /**
     * Retrieves all teams from the database.
     *
     * @return A list of all Team objects found in the database.
     */
    public List<Team> getAllTeams() {
        List<Team> teams = new ArrayList<>();
        String sql = "SELECT id, name FROM Teams";
        try (Connection conn = DatabaseManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                teams.add(new Team(
                        rs.getInt("id"),
                        rs.getString("name")
                ));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all teams: " + e.getMessage());
        }
        return teams;
    }

    /**
     * Updates an existing team's information in the database.
     * The team's ID must be set for the update to occur.
     *
     * @param team The Team object containing the updated information.
     * @return true if the team was updated successfully, false otherwise.
     */
    public boolean updateTeam(Team team) {
        String sql = "UPDATE Teams SET name = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, team.getName());
            pstmt.setInt(2, team.getId());

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error updating team: " + e.getMessage());
        }
        return false;
    }

    /**
     * Deletes a team from the database by its ID.
     *
     * @param id The ID of the team to delete.
     * @return true if the team was deleted successfully, false otherwise.
     */
    public boolean deleteTeam(int id) {
        String sql = "DELETE FROM Teams WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting team: " + e.getMessage());
        }
        return false;
    }
}
